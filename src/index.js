document.addEventListener('DOMContentLoaded', () => {
    const vscode = acquireVsCodeApi();
    document.body.style.visibility = 'hidden'; // hide the body until the images are loaded
    const CONTAINER = 500;
    const ORIG_GAP = 50;
    const placer = document.getElementById('placer');
    placer.innerHTML = '';

    // get 4 random images
    const TYPES = ['ai', 'real'];
    const used = new Set();
    const count = 4;

    while (used.size < count) {
        const type = TYPES[Math.floor(Math.random() * TYPES.length)];
        const id = Math.floor(Math.random() * 9) + 1;
        const key = `${id}_${type}`;
        if (!used.has(key)) {
            used.add(key);
        }
        else continue;
    }

    console.log(used);

    let index = 1;
    const imgURLs = []
    for (const key of used) {
        const img = document.createElement('img');
        img.src = "https://animnia.github.io/images/" + key + ".jpg";
        img.dataset.id = index++;
        img.dataset.type = key.split('_')[1];
        imgURLs.push(img);
    }

    for (const img of imgURLs) {
        placer.appendChild(img);
    }

    const imgs = Array.from(placer.querySelectorAll('img'));

    Promise.all(imgs.map(img => new Promise(res => {
        if (img.complete && img.naturalWidth) return res();
        img.onload = res;
    }))).then(() => {
        const w = imgs.map(i => i.naturalWidth);
        const h = imgs.map(i => i.naturalHeight);
        const leftMaxW = Math.max(w[0], w[2]);
        const rightMaxW = Math.max(w[1], w[3]);
        const topMaxH = Math.max(h[0], h[1]);
        const bottomMaxH = Math.max(h[2], h[3]);

        const totalW = leftMaxW + rightMaxW + ORIG_GAP;
        const totalH = topMaxH + bottomMaxH + ORIG_GAP;
        const scale = Math.min(
            CONTAINER / totalW,
            CONTAINER / totalH
        );
        const gap = ORIG_GAP * scale;
        const halfGap = gap / 2;
        const cx = CONTAINER / 2;
        const cy = CONTAINER / 2;

        imgs.forEach((img, i) => {
            const wi = w[i] * scale;
            const hi = h[i] * scale;
            img.style.width = wi + 'px';
            img.style.height = hi + 'px';
            let left, top;
            if (i === 0) {
                left = cx - wi - halfGap;
                top = cy - hi - halfGap;
            } else if (i === 1) {
                left = cx + halfGap;
                top = cy - hi - halfGap;
            } else if (i === 2) {
                left = cx - wi - halfGap;
                top = cy + halfGap;
            } else {
                left = cx + halfGap;
                top = cy + halfGap;
            }
            img.style.left = left + 'px';
            img.style.top = top + 'px';
        });
        document.body.style.visibility = 'visible';
    });

    placer.addEventListener('click', e => {
        if (e.target.tagName === 'IMG') {
            e.target.classList.toggle('selected');
        }
    });
    document.getElementById('clearBtn').onclick = () => imgs.forEach(i => i.classList.remove('selected'));
    document.getElementById('confirmBtn').onclick = () => {
        const selectedImgs = imgs.filter(i => i.classList.contains('selected'));
        const selectedIDs = imgs.filter(i => i.classList.contains('selected')).map(i => i.dataset.id);

        const notSelectedImgs = imgs.filter(i => !i.classList.contains('selected'));

        const correctIDs = imgs.filter(i => i.dataset.type === 'ai').map(i => i.dataset.id);

        const wrongImgs = imgs.filter(i => i.classList.contains('wrong'));
        const wrongIDs = imgs.filter(i => i.dataset.type === 'real').map(i => i.dataset.id);

        const correct = selectedIDs.filter(id => correctIDs.includes(id)).length;
        const wrong = selectedIDs.filter(id => wrongIDs.includes(id)).length;
        const answer = correctIDs.length;
        
        selectedImgs.forEach(img => {
            if (img.dataset.type === 'real') {
                img.classList.add('wrong');
            }
        });

        notSelectedImgs.forEach(img => {
            if (img.dataset.type === 'ai') {
                img.classList.add('not-selected');
            }
        });
        
        const resultP = document.getElementById('result');
        if (correct === 0) {
            resultP.textContent = `Oops! Everything you selected is wrong.`;
        }
        else if (correct === answer) {
            resultP.textContent = `Congratulations! You found all artworks generated by AI!`;
            confetti({ particleCount: 150, spread: 70, origin: { y: 0.9 } });
        }
        else {
            resultP.textContent = `You selected ${correct} artworks generated by AI and ${wrong} real artworks.`;
        }

        placer.style.pointerEvents = 'none';

        clearBtn.disabled   = true;
        confirmBtn.disabled = true;
      
        clearBtn.style.opacity   = '0.6';
        confirmBtn.style.opacity = '0.6';
        
    };
})